#!/usr/bin/python

import fetchpy, rospy, or_trajopt
import numpy as np
from math import pi

def main():
  env, robot = fetchpy.initialize(None, None, 'qtcoin')
  x = robot.arm.GetDOFValues()
  joint_target = np.array([0., 1., 3.14159265, 2., 0., -2., 0.])
  z = robot.arm.GetArmIndices()
  #robot.SetDOFValues(y, z)
  planner = or_trajopt.TrajoptPlanner()
  robot.SetActiveDOFs(z)
  traj = planner.PlanToConfiguration(robot, joint_target)
  waypoints = traj.GetAllWaypoints2D()
  for waypoint in waypoints:
    robot.arm.SetDOFValues(np.array(waypoint))
    rospy.sleep(1.)
  '''
  request = {
    "basic_info" : 
    {
      "n_steps" : 10,
      "manip" : "arm", 
      # see below for valid values
      "start_fixed" : True 
      # i.e., DOF values at first timestep are fixed based on current robot state
    },
    "costs" : 
    [
      {
        "type" : "joint_vel", 
        # joint-space velocity cost
        "params": {"coeffs" : [1]} 
        # a list of length one is automatically expanded to a list of length n_dofs
        # also valid: [1.9, 2, 3, 4, 5, 5, 4, 3, 2, 1]
      },
      {
        "type" : "collision",
        "params" : 
        {
          "coeffs" : [20], 
          # penalty coefficients. list of length one is automatically expanded to a list of length n_timesteps
          "dist_pen" : [0.025] 
          # robot-obstacle distance that penalty kicks in. expands to length n_timesteps
        },    
      }
    ],
    "constraints" : 
    [
      {
        "type" : "joint", 
        # joint-space target
        "params" : {"vals" : joint_target } 
        # length of vals = # dofs of manip
      }
    ],
    "init_info" : 
    {
      "type" : "straight_line", 
      # straight line in joint space.
      "endpoint" : joint_target
    }
  }
  s = json.dumps(request) 
  # convert dictionary into json-formatted string
  prob = trajoptpy.ConstructProblem(s, env) 
  # create object that stores optimization problem
  t_start = time.time()
  result = trajoptpy.OptimizeProblem(prob) 
  # do optimization
  t_elapsed = time.time() - t_start
  print result
  print "optimization took %.3f seconds"%t_elapsed

  from trajoptpy.check_traj import traj_is_safe
  prob.SetRobotActiveDOFs() 
  # set robot DOFs to DOFs in optimization problem
  assert traj_is_safe(result.GetTraj(), robot) 
  # Check that trajectory is collision free
  '''

if __name__ == '__main__':
  try:
    rospy.init_node('trajopt_test')
    main()
    rospy.spin()
  except rospy.ROSInterruptException:
    pass
